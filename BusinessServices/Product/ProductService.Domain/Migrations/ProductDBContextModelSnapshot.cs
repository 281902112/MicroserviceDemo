// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductService.Domain;

namespace ProductService.Domain.Migrations
{
    [DbContext(typeof(ProductDBContext))]
    partial class ProductDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ProductService.Domain.Category", b =>
                {
                    b.Property<string>("TenantCode");

                    b.Property<Guid>("ID");

                    b.Property<string>("CategoryCode")
                        .IsRequired();

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreateIn");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("OwnerScopeCode");

                    b.Property<DateTimeOffset?>("UpdateIn");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("TenantCode", "ID");

                    b.HasIndex("TenantCode");

                    b.HasIndex("TenantCode", "CategoryCode")
                        .IsUnique();

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            TenantCode = "SYSTEM",
                            ID = new Guid("c01487e5-2e75-40c8-98f9-2a3b06ae5dae"),
                            CategoryCode = "cate1",
                            CategoryName = "商品类别1",
                            CreateIn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            OwnerScopeCode = ""
                        });
                });

            modelBuilder.Entity("ProductService.Domain.Product", b =>
                {
                    b.Property<string>("TenantCode");

                    b.Property<Guid>("ID");

                    b.Property<Guid>("CategoryId");

                    b.Property<DateTimeOffset>("CreateIn");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("OwnerScopeCode");

                    b.Property<int>("ProductAmount");

                    b.Property<string>("ProductCode")
                        .IsRequired();

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<decimal>("ProductPrice");

                    b.Property<string>("ProductProfile")
                        .HasColumnType("json");

                    b.Property<DateTimeOffset?>("UpdateIn");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("TenantCode", "ID");

                    b.HasIndex("TenantCode");

                    b.HasIndex("TenantCode", "CategoryId");

                    b.HasIndex("TenantCode", "ProductCode")
                        .IsUnique();

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            TenantCode = "SYSTEM",
                            ID = new Guid("27b91419-3ae9-430a-8309-948fa94007a7"),
                            CategoryId = new Guid("c01487e5-2e75-40c8-98f9-2a3b06ae5dae"),
                            CreateIn = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            OwnerScopeCode = "",
                            ProductAmount = 100,
                            ProductCode = "product1",
                            ProductName = "商品1",
                            ProductPrice = 60m
                        });
                });

            modelBuilder.Entity("ServiceCommon.Attachment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttachmentName")
                        .IsRequired();

                    b.Property<int>("AttachmentSort");

                    b.Property<string>("AttachmentUrl")
                        .IsRequired();

                    b.Property<Guid?>("ProductID");

                    b.Property<string>("ProductTenantCode");

                    b.HasKey("ID");

                    b.HasIndex("ProductTenantCode", "ProductID");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ServiceCommon.Recycle", b =>
                {
                    b.Property<string>("TenantCode");

                    b.Property<Guid>("ID");

                    b.Property<DateTimeOffset>("CreateIn");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("DeleteBatchID");

                    b.Property<string>("OwnerScopeCode");

                    b.Property<string>("RowData")
                        .IsRequired();

                    b.Property<Guid>("RowKey");

                    b.Property<string>("TableName")
                        .IsRequired();

                    b.Property<DateTimeOffset?>("UpdateIn");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("TenantCode", "ID");

                    b.HasIndex("TenantCode");

                    b.ToTable("Recycle");
                });

            modelBuilder.Entity("ProductService.Domain.Product", b =>
                {
                    b.HasOne("ProductService.Domain.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("TenantCode", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ServiceCommon.Attachment", b =>
                {
                    b.HasOne("ProductService.Domain.Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductTenantCode", "ProductID");
                });
#pragma warning restore 612, 618
        }
    }
}
